sources:
    osm:
        type: TopoJSONTiles
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-VLxfzaw
cameras:
    perspective:
        type: perspective
#        vanishing_point: [0, -500]
        focal_length: [[16, 2], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels
lights:
    directional1:
        type: directional
        direction: [.1, .5, -1]
        diffuse: .7
        ambient: .5
styles:
    space-tile:
        shaders:
            defines:
                TILE_SCALE: 0.0002445
                NORMALIZED_SHORT(x): (x * 32767.)
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords () {
                        return fract(v_pos.xy*TILE_SCALE);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = NORMALIZED_SHORT(a_position.xyz);
    generative-random:
        shaders:
            blocks:
                global: |
                    // 1D Random for 1 and 2 dimentions
                    // ================================
                    float random (float x) {
                        return fract(sin(x)*1e4);
                    }
                    float random (vec2 xy) {
                        return fract(sin(dot(xy.xy, vec2(12.9898,78.233)))* 43758.5453123);
                    }
                    //
                    // 2D Random for 2 dimentions
                    // ================================
                    vec2 random2 (vec2 xy) {
                        return fract(sin(vec2(dot(xy,vec2(127.1,311.7)),dot(xy,vec2(269.5,183.3))))*43758.5453);
                    }
                    //
                    // 3D Random for 2 dimentions
                    // ================================
                    vec3 random3 (vec2 xy) {
                        return fract(sin(vec3( dot(xy,vec2(127.1,311.7)), dot(xy,vec2(269.5,183.3)), dot(xy,vec2(419.2,371.9)) ))*43758.5453);
                    }
                    vec3 random3(vec3 c) {
                        float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
                        vec3 r;
                        r.z = fract(512.0*j);
                        j *= .125;
                        r.x = fract(512.0*j);
                        j *= .125;
                        r.y = fract(512.0*j);
                        return r-0.5;
                    }
    color-tools:
        shaders:
            blocks:
                global: |
                    // Get the intensity of a color
                    // ================================
                    float getIntensity (vec3 c) {
                        return (c.r+c.g+c.b)/3.0;
                    }
                    float getIntensity (vec4 c) {
                        return getIntensity(c.rgb);
                    }
                    //
                    // Get the Brightness of a color
                    // ================================
                    float getBrightness (vec3 c) {
                        return 0.212655 * c.r + 0.715158 * c.g + 0.072187 * c.b;
                    }
                    float getBrightness (vec4 c) {
                        return getBrightness(c.rgb);
                    }
    geometry-normal:
        shaders:
            blocks:
                global: |
                    // Ask to the geometry normals if this surface is a Wall
                    bool isWall() {
                        return dot(v_normal,vec3(0.,0.,1.)) == 0.0;
                    }
                    //
                    // Ask to the geometry normals if this surface is a roof
                    bool isRoof() {
                        return dot(v_normal,vec3(0.,0.,1.)) == 0.0;
                    }

    grid:
        mix: space-tile
        shaders:
            blocks:
                global: |
                    //  Simple Grid
                    //=============================
                    float grid(in vec2 st, in float res, in float press){
                        st = fract(st*res);
                        return 1.0-(step(press*res,st.x) * step(press*res,st.y));
                    }
                    float grid(in vec2 st, in float res){
                        return grid(st,res,0.005);
                    }
                    // GridTile
                    //=============================
                    vec3 TileGrid(float res){
                        vec2 st = getTileCoords()*100.*res;
                        vec3 color = vec3(0.0);
                        float press = 0.5+(1.0-fract(u_map_position.z))*0.1;
                        color += vec3(0.1,0.,0.)*grid(st,0.02,press);
                        color += vec3(0.5,0.,0.)*grid(st,0.01,press);
                        color += 0.1*grid(st,0.1,press);
                        return color;
                    }
                    vec3 TileGrid(){ return mix(TileGrid(1.),TileGrid(2.),fract(u_map_position.z)); }
    roads:
        base: lines
        mix: generative-random
        animated: true
        texcoords: true
        shaders:
            blocks:
                global: |
                    float randomSerie(float x, float freq, float t) {
                        return step(.8,random( floor(x*freq)-floor(t) ));
                    }
                color: |
                    vec2 st = v_texcoord.xy;
                    float t = 12.*u_time;
                    float freq = 100.;
                    if ( v_color.r < 0.5) {
                        float cols = 2.;
                        if (fract(st.x*cols* 0.5) < 0.5){
                            t *= -1.0;
                        }
                    }
                    float offset = 0.025;
                    color.r = randomSerie(st.y, freq, t+offset);
                    color.g = randomSerie(st.y, freq, t);
                    color.b = randomSerie(st.y, freq, t-offset);
                    color.rgb *= step(0.1,st.x)-step(0.9,st.x);
    simple-grid:
        base: polygons
        mix: [grid, generative-random]
        animated: false
        shaders:
            blocks:
                color: |
                    color.rgb *= TileGrid();
                    vec2 st = u_tile_origin.xy+floor(getTileCoords()*2.);
                    float t = u_time*.8+random(st);
                    float time_i = floor(t);
                    float time_f = fract(t);
                    color.rgb += step(0.9,random(st+time_i))*(1.0-time_f);
    numeric-grid:
        base: polygons
        mix: [grid, generative-random]
        animated: true
        shaders:
            blocks:
                global: |
                    float bin(vec2 ipos, float n){
                        float remain = mod(n,33554432.);
                        for(float i = 0.0; i < 25.0; i++){
                            if ( floor(i/3.) == ipos.y && mod(i,3.) == ipos.x ) {
                                return step(1.0,mod(remain,2.));
                            }
                            remain = ceil(remain/2.);
                        }
                        return 0.0;
                    }
                    float char(vec2 st, float n){
                        st.x = st.x*2.-0.5;
                        st.y = st.y*1.2-0.1;
                        vec2 grid = vec2(3.,5.);
                        vec2 ipos = floor(st*grid);
                        n = floor(mod(n,10.));
                        float digit = 0.0;
                        if (n < 1. ) { digit = 31600.; }
                        else if (n < 2. ) { digit = 9363.0; }
                        else if (n < 3. ) { digit = 31184.0; }
                        else if (n < 4. ) { digit = 31208.0; }
                        else if (n < 5. ) { digit = 23525.0; }
                        else if (n < 6. ) { digit = 29672.0; }
                        else if (n < 7. ) { digit = 29680.0; }
                        else if (n < 8. ) { digit = 31013.0; }
                        else if (n < 9. ) { digit = 31728.0; }
                        else if (n < 10. ) { digit = 31717.0; }
                        float pct = bin(ipos, digit);
                        vec2 borders = vec2(1.);
                        // vec2 fpos = fract(st*grid);
                        // borders *= step(0.01,fpos.x) * step(0.01,fpos.y);   // inner
                        borders *= step(0.0,st)*step(0.0,1.-st);            // outer
                        return step(.5,1.0-pct) * borders.x * borders.y;
                    }
                    float box(in vec2 st, in vec2 size){
                        size = vec2(0.5) - size*0.5;
                        vec2 uv = smoothstep(size,
                                            size+vec2(0.001),
                                            st);
                        uv *= smoothstep(size,
                                        size+vec2(0.001),
                                        vec2(1.0)-st);
                        return uv.x*uv.y;
                    }
                    float cross(in vec2 st, vec2 size){
                        return  clamp(box(st, vec2(size.x*0.5,size.y*0.125)) +
                                box(st, vec2(size.y*0.125,size.x*0.5)),0.,1.);
                    }
                color: |
                    vec2 st = getTileCoords();
                    color.rgb = TileGrid();
                    float zoom = 0.0001+fract(u_map_position.z);
                    // Crosses
                    vec2 crosses_st = st + .5;
                    vec2 crosses_st_f = fract(crosses_st);
                    color.rgb *= 1.-cross(crosses_st_f,vec2(.08)*(1.+(1.-zoom)));
                    color.rgb += vec3(.9)*cross(crosses_st_f,vec2(.05)*(1.+(1.-zoom)));

                    // Digits
                    vec2 digits_st = mod(st*(30.+30.*zoom),60.);
                    vec2 digits_st_i = floor(digits_st);
                    if (digits_st_i.y == 1. &&
                        digits_st_i.x > 0. && digits_st_i.x < 7. ) {
                        vec2 digits_st_f = fract(digits_st);
                        float x = u_tile_origin.x+floor(u_time*20.);
                        float pct = x/pow(10.,5.-digits_st_i.x);
                        // pct = 100.*random(digits_st_i+floor(crosses_st)+floor(u_time*20.));
                        color.rgb += vec3(char(digits_st_f,pct));
                    } else if ( digits_st_i.y == 2. &&
                                digits_st_i.x > 0. && digits_st_i.x < 8. ) {
                        vec2 digits_st_f = fract(digits_st);
                        float x = u_tile_origin.y+floor(u_time*20.);
                        float pct = x/pow(10.,5.-digits_st_i.x);
                        // pct = 100.*random(digits_st_i+floor(crosses_st)+floor(u_time*20.));
                        color.rgb += vec3(char(digits_st_f,pct));
                    }


    buildings:
        base: polygons
        mix: [generative-random, color-tools, geometry-normal]
        animated: true
        texcoords: true
        shaders:
            blocks:
                global: |
                    float pattern(vec2 st, vec2 v, float t) {
                        vec2 p = floor(st+v);
                        return step(t, random(100.+p*.000001)+random(p.x)*0.5 );
                    }
                position: |
                    position.z *= max(1.0,0.5+(1.0-(u_map_position.z/20.0))*5.0);
                color: |
                    if (isWall()) {
                        float r = random(getBrightness(color.rgb));
                        float amount = 0.5+random(color.rg)*0.5;

                        if ( r > .3) {
                            // DeFrag
                            vec2 st = v_texcoord.xy;
                            st.y *= 1.+amount*2.;
                            st.y = fract(st.y);
                            st *= vec2(50.0,10.);

                            vec2 ipos = floor(st);
                            ipos += vec2(0.,floor(v_texcoord.y*(1.+amount*5.)));

                            // Random Cells
                            vec2 vel = floor(vec2(u_time*6.)); // time
                            vel *= vec2(-1.,0.); // direction
                            vel *= (step(1., mod(ipos.y,2.0))-0.5)*2.; // Oposite directions
                            vel *= random(ipos.y); // random speed

                            // 100%
                            float t = mod(u_time*20.*(1.+r*.5)+(4324.*amount),500.);
                            vec2 head = vec2(mod(t,50.), floor(t/50.));

                            vec2 offset = vec2(0.1,0.);
                            float pct = 1.0;
                            pct *= step(10.-head.y,ipos.y);// Y
                            pct += (1.0-step(head.x,ipos.x))*step(10.-head.y,ipos.y+1.);   // X
                            pct = clamp(pct,0.,1.);
                            color.rgb = vec3(pct);

                            // Assign a random value base on the integer coord
                            color.r *= random(floor(st+vel+offset));
                            color.g *= random(floor(st+vel));
                            color.b *= random(floor(st+vel-offset));

                            color.rgb = smoothstep(0.,amount,color.rgb*color.rgb);

                            //  Margin
                            color.rgb *= step(.1,fract(st.x+vel.x))*step(.1,fract(st.y+vel.y));
                        } else {
                            // Running lines
                            vec2 st = vec2(v_texcoord.x,v_world_position.z*0.005);
                            vec2 grid = vec2(100.0,20.);
                            st *= grid;

                            vec2 ipos = floor(st);  // integer
                            vec2 fpos = fract(st);  // fraction

                            vec2 vel = vec2(u_time*max(grid.x,grid.y)); // time
                            vel *= vec2(-1.,0.0) * random(1.0+ipos.y); // direction

                            // Assign a random value base on the integer coord
                            vec2 offset = vec2(0.1,0.);

                            color.r = pattern(st+offset,vel,amount);
                            color.g = pattern(st,vel,amount);
                            color.b = pattern(st-offset,vel,amount);
                            color.rgb *= step(0.2,fpos.y);
                        }
                    } else {
                        color.rgb = vec3(0.);
                    }

    buildingsLines:
        base: lines
        mix: tools
        lighting: false
        texcoords: true
        shaders:
            blocks:
                position: |
                    position.z *= max(1.0,0.5+(1.0-(u_map_position.z/20.0))*5.0);
    tools:
        animated: true
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                global: |
                    // Common Values
                    //================================
                    float radio = 0.05;
                    vec2 size = vec2(1.,.6);
                    vec3 background = vec3(0.996,0.996,0.918);
                    vec3 midle = vec3(0.824, 0.812, 0.804);
                    vec3 foreground = vec3(0.275,0.298,0.251);

                    // Coord System
                    //================================
                    varying vec3 v_pos;

                    #ifdef TANGRAM_FRAGMENT_SHADER
                    vec2 TileCoords(){return fract(v_pos.xy*0.0002445);}

                    float aastep(float threshold, float value) {
                      #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                        float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;
                        return smoothstep(threshold-afwidth, threshold+afwidth, value);
                      #else
                        return step(threshold, value);
                      #endif
                    }

                    float pulse(float x,float p, float w){
                        x = abs(x - p);
                        if( x>w ) return 0.0;
                        x /= w;
                        return 1.0 - x*x*(3.0-2.0*x);
                    }

                    float boxDF(vec2 st, vec2 size) {
                        float aspect = u_resolution.x/u_resolution.y;
                        st = st*2.-1.;
                        st.x *= aspect;
                        return length(max(abs(st)-size,.0));
                    }

                    float stripes(vec2 st, float width){
                        return aastep(width,abs(sin(st.y*3.14159265358)));
                    }
                    mat2 rotate2d(float angle){
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
                    float stripes(vec2 st){
                        st = rotate2d(.72)*st;
                        st *= 92.;
                        return aastep(.3,abs(sin(st.y*3.14159265358)));
                    }

                    #endif
                position: |
                    v_pos = a_position.xyz * 32767.;
                filter: |
                    vec2 xy = gl_FragCoord.xy/u_resolution.xy;
                    xy.x *= u_resolution.x/u_resolution.y;
                    xy = xy-vec2(.5*u_resolution.x/u_resolution.y,.5);

                    float t = -u_time*.5;
                    float radius = 0.0;
                    // radius = length(xy)*10.;
                    radius = dot(xy,xy)*3.;

                    color.rgb = mix(color.rgb,1.-color.rgb,1.0-aastep(.3,sin(fract(radius+t)*3.1415)));

    border:
        base: lines
        mix: tools
        texcoords: true
        shaders:
            blocks:
                color: |
                    vec2 st = v_texcoord.xy;
                    float pattern = aastep(.5,pulse(st.x,.7,.1)+pulse(st.x,.35,.25));
                    color.rgb = mix(background,color.rgb,pattern);
    b_border:
        base: lines
        mix: tools
        texcoords: true
        shaders:
            blocks:
                color: |
                    vec2 st = v_texcoord.xy;
                    float pattern = aastep(.5,pulse(st.x,.5,.2));
                    color.rgb = mix(background,color.rgb,pattern);

    waves:
        base: polygons
        mix: tools
        shaders:
            blocks:
                color: |
                    vec2 st = (gl_FragCoord.xy / u_resolution.xy);
                    float aspect = u_resolution.x/u_resolution.y;
                    // size.x *= aspect;

                    vec2 pos = st;
                    pos.x = pos.x*aspect;
                    pos.y += sin(pos.x*30.)*.01;
                    color.rgb = mix(color.rgb,background,stripes(pos*200.,.4));
    zigzag:
        base: polygons
        mix: tools
        shaders:
            blocks:
                color: |
                    vec2 st = (gl_FragCoord.xy / u_resolution.xy);
                    float aspect = u_resolution.x/u_resolution.y;
                    // size.x *= aspect;

                    vec2 pos = fract(st*100.);
                    pos.y += mix(fract(pos.x),fract(1.0-pos.x),step(.5,pos.x))*3.;
                    color.rgb = mix(color.rgb,background,stripes(pos,.3));
    hatch:
        base: polygons
        mix: tools
        shaders:
            blocks:
                color: |
                    vec2 st = (gl_FragCoord.xy / u_resolution.xy);
                    float aspect = u_resolution.x/u_resolution.y;
                    // size.x *= aspect;
                    color.rgb = mix(color.rgb,background,stripes(st*3.));
    frame:
        base: polygons
        mix: tools
        shaders:
            blocks:
                color: |
                    vec2 st = (gl_FragCoord.xy / u_resolution.xy);
                    float aspect = u_resolution.x/u_resolution.y;
                    // size.x *= aspect;

                    vec2 pos = st;
                    pos.x = pos.x*aspect;
                    pos.y += sin(pos.x*30.)*.01;
                    color.rgb = mix(color.rgb,background,stripes(pos*200.,.4));

layers:
    earth:
        data: { source: osm }
        draw:
            polygons:
                order: 0
                color: '#555'
            waves:
                order: 0
                color: [0.824, 0.812, 0.804]
            border:
                order: 5
                color: #464C40
                cap: round
                width: 8px
            simple-grid:
                order: 0
                color: [0.362,0.362,0.362]
    water:
        data: { source: osm }
        draw:
            polygons:
                order: 2
                color: '#353535'
            frame:
                order: 1
                color: [1.000, 1.000, 1.000]
            b_border:
                order: 5
                cap: round
                width: 8px
                color: #464C40
                width: 5px
            numeric-grid:
                order: 3
                color: [1.000,1.000,1.000]
            outline:
                order: 2
                style: lines
                color: [1.000,1.000,1.000]
                width: 2px
                tile_edges: false
    landuse:
        data: { source: osm }
        draw:
            polygons:
                order: 1
                color: '#666'
            hatch:
                order: 2
                color: #464C40
            lines:
                order: 3
                color: white
                cap: round
                width: 2px
    roads:
        data: { source: osm }
        filter: { not: { highway: service, kind: rail } }
        draw:
            lines:
                order: 4
                color: white
                width: [[5, 0.5px],[15, 2px],[85, 50]]
            roads:
                order: 5
                color: [0, 0, 0]
                width: 8
            outline:
                style: lines
                order: 4
                color: [0.773,0.763,0.763]
                width: 8.5
        oneway:
            filter: { oneway: yes }
            draw: { roads: { color: red } }
    buildings:
        data: { source: osm }
        draw:
            polygons:
                order: 50
                color: '#999'
            b_border:
                order: 6
                color: [[10,[1,1,1]],[15,[1,1,1]],[18,[0.306, 0.306, 0.306]]]
                width: [[10, 1], [12, 1px],[14, 1px], [16, 2px], [17, 3px], [18, 5px]]
            buildings:
                order: 7
                color: Style.color.pseudoRandomColor()
        3d-buildings:
            filter: { $zoom: { min: 13 } }
            draw:
                buildings:
                    extrude: true
                buildingsLines:
                    order: 8
                    color: [0.687,0.660,0.660]
                    width: .5px
                    extrude: true
        extruded:
            draw:
                polygons:
                    style: buildings
                    extrude: function () { return feature.height > 0 || $zoom >= 16; }
    road_labels:
        data: { source: osm, layer: roads }
        filter: { name: true, aeroway: false, tunnel: false, railway: false, not: { kind: rail } }

        highway:
            filter: { kind: highway, $zoom: { min: 7 } }
            draw:
                text:
                    font:
                        fill: white
                        typeface: 500 12px Helvetica
        not_highway:
            filter: { not: { kind: highway }, $zoom: { min: 13 } }
            draw:
                text:
                    font:
                        fill: white
                        typeface: 100 11px Helvetica
    places:
        data: { source: osm }
        filter: { name: true }
        draw:
            text:
                font:
                    typeface: Italic 14px Times
                    fill: black
                    stroke: { color: white , width: 5 }
